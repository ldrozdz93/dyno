// Copyright Louis Dionne 2017
// Distributed under the Boost Software License, Version 1.0.
// (See accompanying file LICENSE.md or copy at http://boost.org/LICENSE_1_0.txt)

#ifndef DYNO_MACRO_HPP
#define DYNO_MACRO_HPP

//////////////////////////////////////////////////////////////////////////////
// THIS FILE WAS GENERATED; DO NOT EDIT DIRECTLY.
//
//
// This file is generated from the <dyno/detail/macro.hpp.erb> ERB[1] template
// file. The maximum number of methods that can be handled by the macros can
// be controlled with the 'MAX_NUMBER_OF_METHODS' variable, which can be set
// when calling ERB to generate the header:
//
//    export MAX_NUMBER_OF_METHODS=55
//    erb include/dyno/detail/macro.hpp.erb > include/dyno/macro.hpp
//
// Due to the limits of some preprocessor macros we're using in the implementation,
// 'MAX_NUMBER_OF_METHODS' must be <= 62, otherwise an error is triggered.
// If 'MAX_NUMBER_OF_METHODS' is not specified, it defaults to 20.
//
// [1]: http://en.wikipedia.org/wiki/ERuby
//////////////////////////////////////////////////////////////////////////////

<%
  MAX_NUMBER_OF_METHODS = (ENV["MAX_NUMBER_OF_METHODS"] || 20).to_i
  raise "MAX_NUMBER_OF_METHODS must be <= 62" if MAX_NUMBER_OF_METHODS > 62
%>

#include <dyno/concept.hpp>
#include <dyno/concept_map.hpp>
#include <dyno/detail/dsl.hpp>
#include <dyno/detail/preprocessor.hpp>
#include <dyno/poly.hpp>
#include <dyno/detail/macro_details.hpp>

#include <boost/callable_traits/function_type.hpp>
#include <boost/callable_traits/is_const_member.hpp>
#include <boost/callable_traits/return_type.hpp>

#include <type_traits>
#include <utility>

// TODOS
// - Allow specifying custom base concepts and base interfaces. By default, a
//   concept could provide a default interface (e.g. a copy constructor for
//   CopyConstructible, etc..).
// - Handle const and non-const more gracefully
// - Try to get rid of commas in the method definition. Use a BOOST_PP_SEQ

#define DYNO_INTERFACE(name, ...) \
  DYNO_PP_CONCAT(DYNO_PP_INTERFACE_IMPL_, DYNO_PP_NARG(__VA_ARGS__))(name, __VA_ARGS__)

<% (0..MAX_NUMBER_OF_METHODS).each do |n|
args = (1..n).map { |i| "arg#{i}" }

def dyno_string(arg)
  "DYNO_STRING(DYNO_PP_STRINGIZE(DYNO_PP_VARIADIC_HEAD #{arg}))"
end
%>

#define DYNO_PP_INTERFACE_IMPL_<%= n %>(name<%= args.map { |arg| ", #{arg}" }.join %>)\
  template< bool isCopyConstructible >                                        \
  struct DYNO_PP_CONCAT(dyno_concept_for_, name) {                            \
    static auto make_type() {                                                 \
      if constexpr( isCopyConstructible == true )                             \
      {                                                                       \
        return ::dyno::requires(                                              \
          <% args.each_with_index do |arg, i| %>                              \
            <%= ',' if i > 0 %>                                               \
            <%= dyno_string(arg) %> = ::dyno::method<DYNO_PP_VARIADIC_TAIL <%= arg %>>\
          <% end %>,                                                          \
          dyno::CopyConstructible{}                                           \
        );                                                                    \
      } else                                                                  \
      {                                                                       \
        return ::dyno::requires(                                              \
          <% args.each_with_index do |arg, i| %>                              \
            <%= ',' if i > 0 %>                                               \
            <%= dyno_string(arg) %> = ::dyno::method<DYNO_PP_VARIADIC_TAIL <%= arg %>>\
          <% end %>                                                           \
        );                                                                    \
      }                                                                       \
    }                                                                         \
  };                                                                          \
template< typename StorageType = dyno::remote_storage,                        \
          uint32_t properties_bitfield = dyno::properties::all_default >      \
  class name {      	                                                      \
    static constexpr dyno::detail::macro_config config{ properties_bitfield };\
    using concept_t =                                                         \
      decltype(DYNO_PP_CONCAT(dyno_concept_for_, name)<config.is_copy_constructible>::make_type());   \
    using this_t = name<StorageType, properties_bitfield>;                    \
    using poly_t = ::dyno::poly<concept_t, StorageType>;                      \
    template< typename, uint32_t > friend class name;                         \
    template< typename> struct is_a_##name : std::false_type {};              \
    template< typename T, uint32_t prop > struct is_a_##name<name<T, prop> > : std::true_type {};  \
    template <typename T, typename... Args >                                  \
    auto construct_poly(T&& x, Args&&... argsForMake)                         \
    {                                                                         \
        using RawT = std::decay_t<T>;                                         \
                                                                              \
        if constexpr(not is_a_##name<RawT>::value)                            \
        {                                                                     \
          auto make_concept_map = [&]                                         \
          {                                                                   \
            return ::dyno::make_concept_map(                                  \
              <% args.each_with_index do |arg, i| %>                          \
                <%= ',' if i > 0 %>                                           \
                <%= dyno_string(arg) %> = [](auto&& self, auto&& ...args) -> decltype(auto) {\
                    return static_cast<decltype(self)&&>(self)                \
                      .DYNO_PP_VARIADIC_HEAD <%= arg %>                       \
                        (static_cast<decltype(args)&&>(args)...);             \
                  }                                                           \
              <% end %>                                                       \
            ) ;                                                               \
          };                                                                  \
          if constexpr( dyno::detail::is_a_make<RawT> )                       \
          {                                                                   \
            return poly_t{::std::forward<T>(x),                               \
                          make_concept_map(),                                 \
                         ::std::forward<Args>(argsForMake)...};               \
          }                                                                   \
          else                                                                \
          {                                                                   \
            static_assert(sizeof...(argsForMake) == 0,                        \
                         "Variable argument pack is only for make<T> idiom!");\
            if constexpr( config.is_exception_safe_constructible )            \
            {                                                                 \
              static_assert(noexcept(x.~RawT()),                              \
                            "Destructor must be noexcept to ensure "          \
                            "exception safety of assignment.");               \
              static_assert(noexcept(RawT(std::forward<T>(x))),               \
                            "Constructor must be noexcept to ensure "         \
                            "exception safety of a possible assignment. "     \
                            "Please consider using exception_unsafe "         \
                            "macro property on interface creation.");         \
            }                                                                 \
            return poly_t{::std::forward<T>(x),                               \
                          make_concept_map()};                                \
          }                                                                   \
        }                                                                     \
        else /* is_a_##name<RawT>::value */                                   \
        {                                                                     \
          static_assert(config.is_copy_constructible,                         \
                        "Trying to copy or move a noncopyable object!");      \
          return poly_t{std::forward<T>(x).poly_};                            \
        }                                                                     \
    }                                                                         \
                                                                              \
    template <typename T >                                                    \
    name& operatorEquals(T&& t)                                               \
    {                                                                         \
      this->~name();                                                          \
      return *(new (static_cast<void*>(this)) name(std::forward<T>(t)));      \
    }                                                                         \
                                                                              \
  public:                                                                     \
    name(const name&) = default;                                              \
    name(name&&) = default;                                                   \
    template <typename T, typename... Args >                                  \
    name(T&& x, Args&&... args)                                               \
      : poly_{construct_poly(std::forward<T>(x), std::forward<Args>(args)...)}\
    {}                                                                        \
                                                                              \
    name& operator=(const name& other) { return operatorEquals(other); }      \
    name& operator=(name&& other) { return operatorEquals(std::move(other)); }\
    template <typename T >                                                    \
    name& operator=(T&& t){ return operatorEquals(std::forward<T>(t)); }      \
                                                                              \
    <% args.each_with_index do |arg, i| %>                                    \
      template <typename ...Args, typename = decltype(                        \
        ::std::declval<::boost::callable_traits::function_type_t<DYNO_PP_VARIADIC_TAIL <%= arg %>>>()\
          (::std::declval<Args&&>()...)                                       \
      ), typename = ::std::enable_if_t<                                       \
        !::boost::callable_traits::is_const_member<DYNO_PP_VARIADIC_TAIL <%= arg %>>::value,\
        char[sizeof...(Args)+1] /* make the enable_if dependent */            \
      >>                                                                      \
      ::boost::callable_traits::return_type_t<DYNO_PP_VARIADIC_TAIL <%= arg %>>\
      DYNO_PP_VARIADIC_HEAD <%= arg %>(Args&& ...args) {                      \
        return poly_.virtual_(<%= dyno_string(arg) %>)(static_cast<Args&&>(args)...);\
      }                                                                       \
      template <typename ...Args, typename = decltype(                        \
        ::std::declval<::boost::callable_traits::function_type_t<DYNO_PP_VARIADIC_TAIL <%= arg %>>>()\
          (::std::declval<Args&&>()...)                                       \
      ), typename = ::std::enable_if_t<                                       \
        ::boost::callable_traits::is_const_member<DYNO_PP_VARIADIC_TAIL <%= arg %>>::value,\
        char[sizeof...(Args)+1] /* make the enable_if dependent */            \
      >>                                                                      \
      ::boost::callable_traits::return_type_t<DYNO_PP_VARIADIC_TAIL <%= arg %>>\
      DYNO_PP_VARIADIC_HEAD <%= arg %>(Args&& ...args) const {                \
        return poly_.virtual_(<%= dyno_string(arg) %>)(static_cast<Args&&>(args)...);\
      }                                                                       \
    <% end %>                                                                 \
  private:                                                                    \
    ::dyno::poly<concept_t, StorageType> poly_;                               \
  }

<% end %>

#endif // DYNO_MACRO_HPP

